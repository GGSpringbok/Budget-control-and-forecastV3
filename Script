function main() {
 
  //Budget-control-and-forecastV2
 
  // Connecten met spreadsheet
  const spreadsheetUrl = 'SPREADSHEETURL'; //Vul hier de link van de spreadsheet in
  const sheetName = 'SHEETNAME'; // Vul hier de naam van het tablad in
  const emailAdress = 'EMAILADRESS'; // Vul hier jouw e-mailadres in
  const jaarBudget = JAARBUDGET; // Vul hier het jaarbudget in
  
  // Extra budget toevoegen, vul per maand het extra budget in dat meegenomen moet worden bovenop het always-on budget  
  let extraBudgetJan = 0;
  let extraBudgetFeb = 0;
  let extraBudgetMar = 0;
  let extraBudgetApr = 0;
  let extraBudgetMay = 0;
  let extraBudgetJun = 0;
  let extraBudgetJul = 0;
  let extraBudgetAug = 0;
  let extraBudgetSep = 0;
  let extraBudgetOct = 0;
  let extraBudgetNov = 0;
  let extraBudgetDec = 0;
  
//------------------- verander niks onder deze lijn ------------------------------------------------
  
  const spreadsheet = SpreadsheetApp.openByUrl(spreadsheetUrl);
  const ss = spreadsheet.getSheetByName(sheetName);
  
  let sheetarray = [['Budget', 'Kosten', 'Budget (linear)', 'Kosten (linear)', 'Forecast daily spend', 'Resterend dagbudget', '% spend', '% maand']];

  //gisteren ophalen
  var yesterday = new Date(Date.now() - 86400000);
  let yesterdayString = yesterday.toString();
  let maandString = yesterdayString.slice(4, 7);
  let dagString = yesterdayString.slice(8, 10);
  let dagInteger = Number(dagString);
  let jaarString = yesterdayString.slice(11, 15);
  let jaar = jaarString;
      
  //Pakt het budget uit B16
  //let budgetyear = spreadsheet.getSheetByName('Vattenfall - E-mobility').getRange('Vattenfall - E-mobility!B16').getValues();
  let maandBudget = jaarBudget / 12;
  let maandBudgetOverzicht = [maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget, maandBudget];
  let budgetLinear = 0;
  
  if (extraBudgetJan != 0) {
    maandBudgetOverzicht[0] = maandBudgetOverzicht[0] + extraBudgetJan;
  } else {
    maandBudgetOverzicht[0] = maandBudgetOverzicht[0];
  }
  
  if (extraBudgetFeb != 0) {
    maandBudgetOverzicht[1] = maandBudgetOverzicht[1] + extraBudgetFeb;
  } else {
    maandBudgetOverzicht[1] = maandBudgetOverzicht[1];
  }
  
  if (extraBudgetMar != 0) {
    maandBudgetOverzicht[2] = maandBudgetOverzicht[2] + extraBudgetMar;
  } else {
    maandBudgetOverzicht[2] = maandBudgetOverzicht[2];
  }  
  
  if (extraBudgetApr != 0) {
    maandBudgetOverzicht[3] = maandBudgetOverzicht[3] + extraBudgetApr;
  } else {
    maandBudgetOverzicht[3] = maandBudgetOverzicht[3];
  }    

  if (extraBudgetMay != 0) {
    maandBudgetOverzicht[4] = maandBudgetOverzicht[4] + extraBudgetMay;
  } else {
    maandBudgetOverzicht[4] = maandBudgetOverzicht[4];
  }    
  
  if (extraBudgetJun != 0) {
    maandBudgetOverzicht[5] = maandBudgetOverzicht[5] + extraBudgetJun;
  } else {
    maandBudgetOverzicht[5] = maandBudgetOverzicht[5];
  }    
  
  if (extraBudgetJul != 0) {
    maandBudgetOverzicht[6] = maandBudgetOverzicht[6] + extraBudgetJul;
  } else {
    maandBudgetOverzicht[6] = maandBudgetOverzicht[6];
  }    
  
  if (extraBudgetAug != 0) {
    maandBudgetOverzicht[7] = maandBudgetOverzicht[7] + extraBudgetAug;
  } else {
    maandBudgetOverzicht[7] = maandBudgetOverzicht[7];
  }    
  
  if (extraBudgetSep != 0) {
    maandBudgetOverzicht[8] = maandBudgetOverzicht[8] + extraBudgetSep;
  } else {
    maandBudgetOverzicht[8] = maandBudgetOverzicht[8];
  }    
  
  if (extraBudgetOct != 0) {
    maandBudgetOverzicht[9] = maandBudgetOverzicht[9] + extraBudgetOct;
  } else {
    maandBudgetOverzicht[9] = maandBudgetOverzicht[9];
  }    
  
  if (extraBudgetNov != 0) {
    maandBudgetOverzicht[10] = maandBudgetOverzicht[10] + extraBudgetNov;
  } else {
    maandBudgetOverzicht[10] = maandBudgetOverzicht[10];
  }      
  
  if (extraBudgetDec != 0) {
    maandBudgetOverzicht[11] = maandBudgetOverzicht[11] + extraBudgetDec;
  } else {
    maandBudgetOverzicht[11] = maandBudgetOverzicht[11];
  }      
  
  Logger.log(maandBudgetOverzicht);
  
  //Pakt het jaartal uit B17
  // let periodeInteger = spreadsheet.getSheetByName('Vattenfall - E-mobility').getRange('Vattenfall - E-mobility!B17').getValues();
  let jaartal = jaar.toString(); 
  
  // kosten per maand (schrikkeljaar nog niet meegenomen -> 2024 is schrikkeljaar)
  let kostenjan = AdsApp.currentAccount().getStatsFor(`${jaartal}0101`,`${jaartal}0131`).getCost(); 
  let kostenfeb = AdsApp.currentAccount().getStatsFor(`${jaartal}0201`,`${jaartal}0228`).getCost(); 
  let kostenmrt = AdsApp.currentAccount().getStatsFor(`${jaartal}0301`,`${jaartal}0331`).getCost(); 
  let kostenapr = AdsApp.currentAccount().getStatsFor(`${jaartal}0401`,`${jaartal}0430`).getCost(); 
  let kostenmei = AdsApp.currentAccount().getStatsFor(`${jaartal}0501`,`${jaartal}0531`).getCost(); 
  let kostenjun = AdsApp.currentAccount().getStatsFor(`${jaartal}0601`,`${jaartal}0630`).getCost(); 
  let kostenjul = AdsApp.currentAccount().getStatsFor(`${jaartal}0701`,`${jaartal}0731`).getCost(); 
  let kostenaug = AdsApp.currentAccount().getStatsFor(`${jaartal}0801`,`${jaartal}0831`).getCost(); 
  let kostensep = AdsApp.currentAccount().getStatsFor(`${jaartal}0901`,`${jaartal}0930`).getCost(); 
  let kostenokt = AdsApp.currentAccount().getStatsFor(`${jaartal}1001`,`${jaartal}1031`).getCost(); 
  let kostennov = AdsApp.currentAccount().getStatsFor(`${jaartal}1101`,`${jaartal}1130`).getCost(); 
  let kostendec = AdsApp.currentAccount().getStatsFor(`${jaartal}1201`,`${jaartal}1231`).getCost(); 
  
  let monthsCost = [kostenjan, kostenfeb, kostenmrt, kostenapr, kostenmei, kostenjun, kostenjul, kostenaug, kostensep, kostenokt, kostennov, kostendec];
 
  let dagenJan = 31;
  let dagenFeb = 28;
  let dagenMrt = 31;
  let dagenApr = 30;  
  let dagenMei = 31;
  let dagenJun = 30;
  let dagenJul = 31;
  let dagenAug = 31;
  let dagenSep = 30;
  let dagenOkt = 31;
  let dagenNov = 30;
  let dagenDec = 31;
  
  //Berekent het lineare budget
  let budgetLinearTwee = [];
  for (var i = 0; i < 12; i++) {
    for (var j = 0; j <= i; j++) {
      budgetLinearTwee[i] = (budgetLinearTwee[i] || 0) + maandBudgetOverzicht[j]; 
    }
  }
  
  let kostenLinear = 0;
 
  //Berekent de lineare kosten
  let kostenLinearTwee = [];
  for (var i = 0; i < 12; i++) {
    for (var j = 0; j <= i; j++) {
      kostenLinearTwee[i] = (kostenLinearTwee[i] || 0) + monthsCost[j]; 
    }
  }
  
  //------------------------------------------------------------ forecast gemiddeld dagbudget
   
  //Kosten deze maand t/m gister
  let kostenVandaag = AdsApp.currentAccount().getStatsFor('TODAY').getCost();  
  let kostenDezeMaand = AdsApp.currentAccount().getStatsFor('THIS_MONTH').getCost();  
  let kostenDezeMaandTmGister = kostenDezeMaand - kostenVandaag;
  
  let forecastGemDagKosten = [];
  
  //Checkt welke maand het is en stuurt naar array
  switch (maandString) {
    case maandString:
      if (maandString == 'Jan' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Feb' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Mar' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }      
    case maandString:
      if (maandString == 'Apr' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'May' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }      
    case maandString:
      if (maandString == 'Jun' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Jul' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Aug' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Sep' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Oct' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    case maandString:
      if (maandString == 'Nov' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
    default:
      if (maandString == 'Dec' && dagInteger != 1) {
        forecastGemDagKosten.push(Math.round(kostenDezeMaandTmGister / dagInteger));
      } else {
        forecastGemDagKosten.push(0);
      }
  }
    
  //------------------------------------------------------------ resterend dagbudget  
  
  let forecastGemiddeldDagbudget = [];
  
    //Checkt welke maand het is, berekent het budget en stuurt het naar een array
  switch (maandString) {
    case maandString:
      if (maandString == 'Jan' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[0] - kostenLinearTwee[0] - kostenVandaag) / (dagenJan - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Feb' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[1] - kostenLinearTwee[1] - kostenVandaag) / (dagenFeb - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Mar' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[2] - kostenLinearTwee[2] - kostenVandaag) / (dagenMrt - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }      
    case maandString:
      if (maandString == 'Apr' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[3] - kostenLinearTwee[3] - kostenVandaag) / (dagenApr - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'May' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[4] - kostenLinearTwee[4] - kostenVandaag) / (dagenMei - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }      
    case maandString:
      if (maandString == 'Jun' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[5] - kostenLinearTwee[5] - kostenVandaag) / (dagenJun - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Jul' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[6] - kostenLinearTwee[6] - kostenVandaag) / (dagenJul - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Aug' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[7] - kostenLinearTwee[7] - kostenVandaag) / (dagenAug - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Sep' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[8] - kostenLinearTwee[8] - kostenVandaag) / (dagenSep - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Oct' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[9] - kostenLinearTwee[9] - kostenVandaag) / (dagenOkt - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    case maandString:
      if (maandString == 'Nov' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[10] - kostenLinearTwee[10] - kostenVandaag) / (dagenNov - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
    default:
      if (maandString == 'Dec' && dagInteger != 1) {
        forecastGemiddeldDagbudget.push(Math.round((budgetLinearTwee[11] - kostenLinearTwee[11] - kostenVandaag) / (dagenDec - dagInteger)));
      } else {
        forecastGemiddeldDagbudget.push(0);
      }
  } 
  
  //------------------------------------------------------------ % spend
  
  let spendPercentage = [];
  
  switch (maandString) {
    case maandString:
      if (maandString == 'Jan') {
        spendPercentage.push((kostenLinearTwee[0] - kostenVandaag) / budgetLinearTwee[0]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Feb') {
        spendPercentage.push((kostenLinearTwee[1] - kostenVandaag) / budgetLinearTwee[1]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Mar') {
        spendPercentage.push((kostenLinearTwee[2] - kostenVandaag) / budgetLinearTwee[2]);
      } else {
        spendPercentage.push(0);
      }      
    case maandString:
      if (maandString == 'Apr') {
        spendPercentage.push((kostenLinearTwee[3] - kostenVandaag) / budgetLinearTwee[3]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'May') {
        spendPercentage.push((kostenLinearTwee[4] - kostenVandaag) / budgetLinearTwee[4]);
      } else {
        spendPercentage.push(0);
      }      
    case maandString:
      if (maandString == 'Jun') {
        spendPercentage.push((kostenLinearTwee[5] - kostenVandaag) / budgetLinearTwee[5]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Jul') {
        spendPercentage.push((kostenLinearTwee[6] - kostenVandaag) / budgetLinearTwee[6]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Aug') {
        spendPercentage.push((kostenLinearTwee[7] - kostenVandaag) / budgetLinearTwee[7]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Sep') {
        spendPercentage.push((kostenLinearTwee[8] - kostenVandaag) / budgetLinearTwee[8]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Oct') {
        spendPercentage.push((kostenLinearTwee[9] - kostenVandaag) / budgetLinearTwee[9]);
      } else {
        spendPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Nov') {
        spendPercentage.push((kostenLinearTwee[10] - kostenVandaag) / budgetLinearTwee[10]);
      } else {
        spendPercentage.push(0);
      }
    default:
      if (maandString == 'Dec') {
        spendPercentage.push((kostenLinearTwee[11] - kostenVandaag) / budgetLinearTwee[11]);
      } else {
        spendPercentage.push(0);
      }
  } 

  //------------------------------------------------------------ % maand
  
  let maandPercentage = [];
  
  switch (maandString) {
    case maandString:
      if (maandString == 'Jan') {
        maandPercentage.push(dagInteger / dagenJan);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Feb') {
        maandPercentage.push(dagInteger / dagenFeb);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Mar') {
        maandPercentage.push(dagInteger / dagenMrt);
      } else {
        maandPercentage.push(0);
      }      
    case maandString:
      if (maandString == 'Apr') {
        maandPercentage.push(dagInteger / dagenApr);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'May') {
        maandPercentage.push(dagInteger / dagenMei);
      } else {
        maandPercentage.push(0);
      }      
    case maandString:
      if (maandString == 'Jun') {
        maandPercentage.push(dagInteger / dagenJun);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Jul') {
        maandPercentage.push(dagInteger / dagenJul);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Aug') {
        maandPercentage.push(dagInteger / dagenAug);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Sep') {
        maandPercentage.push(dagInteger / dagenSep);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Oct') {
        maandPercentage.push(dagInteger / dagenOkt);
      } else {
        maandPercentage.push(0);
      }
    case maandString:
      if (maandString == 'Nov') {
        maandPercentage.push(dagInteger / dagenNov);
      } else {
        maandPercentage.push(0);
      }
    default:
      if (maandString == 'Dec') {
        maandPercentage.push(dagInteger / dagenDec);
      } else {
        maandPercentage.push(0);
      }
  } 


//----------------------------------------------------------------------------------------- Stuurt de data naar een array

  //Stuurt alle waardes naar een array in de sheet
  for ( var i = 0; i < 12; i++ ) {
    sheetarray.push([
      maandBudgetOverzicht[i],
      monthsCost[i],
      budgetLinearTwee[i],
      kostenLinearTwee[i],
      forecastGemDagKosten[i],
      forecastGemiddeldDagbudget[i],
      spendPercentage[i],
      maandPercentage[i]]);  
  }

  Logger.log(sheetarray);

  if (sheetarray.length > 0) {
  ss.getRange(1, 2, sheetarray.length, sheetarray[0].length).setValues(sheetarray);
  }
  
  let totaalGemDagKos = spreadsheet.getSheetByName(sheetName).getRange(`${sheetName}!F14`).getValues();
  let totaalResBud = spreadsheet.getSheetByName(sheetName).getRange(`${sheetName}!G14`).getValues();
  let forecastTeHogeDagKosten = Math.round(totaalGemDagKos - totaalResBud);
    
  // Verstuurd e-mail wanneer de forecast gemiddeld dagbudget hoger is dan het resterende dagbudget  
  const emailSubject = '[Script Alert Budget control and Forecast]';
  const accountNaam = AdsApp.currentAccount().getName();
  const emailBody = 
    "\n"+
    `Let op, voor het account ${accountNaam} zit je ${forecastTeHogeDagKosten} euro over het resterende dagbudget heen voor deze maand!`;
  
  if (totaalGemDagKos > totaalResBud) {
    MailApp.sendEmail(emailAdress, emailSubject, emailBody);
    } else {
      //MailApp.sendEmail(emailAdress, emailSubject, emailBody);
      Logger.log('Geen e-mail');
               }
}
